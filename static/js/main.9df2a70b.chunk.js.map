{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","components/Palette.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","_ref","form","children","palette","react_default","a","createElement","className","Form","value","onChange","onCreate","onKeyPress","onClick","TodoItem","nextProps","nextState","this","props","checked","_this$props","text","id","color","onToggle","onRemove","e","stopPropagation","style","concat","Component","TodoItemList","todos","todoList","map","src_components_TodoItem","key","Color","active","background","Palette","_ref2","colors","selected","onSelect","colorList","Palette_Color","App","state","input","handleChange","_this","setState","target","handleCreate","_this$state","handleKeyPress","handleToggle","index","findIndex","todo","Object","toConsumableArray","slice","objectSpread","length","handleRemove","filter","handleSelectColor","_this$state2","src_components_TodoListTemplate","src_components_Form","src_components_Palette","components_TodoItemList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9df2a70b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TodoListTemplate.css\";\r\n\r\nconst TodoListTemplate = ({ form, children, palette }) => {\r\n  return (\r\n    <main className=\"todo-list-template\">\r\n      <div className=\"title\">오늘 할 일</div>\r\n      <section className=\"palette-wrapper\">{palette}</section>\r\n      <section className=\"form-wrapper\">{form}</section>\r\n      <section className=\"todos-wrapper\">{children}</section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default TodoListTemplate;\r\n","import React from \"react\";\r\nimport \"./Form.css\";\r\n\r\nconst Form = ({ value, onChange, onCreate, onKeyPress }) => {\r\n  return (\r\n    <div className=\"form\">\r\n      <input value={value} onChange={onChange} onKeyPress={onKeyPress} />\r\n      <div className=\"create-button\" onClick={onCreate}>\r\n        추가\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\nimport \"./TodoItem.css\";\r\n\r\nclass TodoItem extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.checked !== nextProps.checked;\r\n  }\r\n  render() {\r\n    const { text, checked, id, color, onToggle, onRemove } = this.props;\r\n\r\n    return (\r\n      <div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n        <div\r\n          className=\"remove\"\r\n          onClick={e => {\r\n            e.stopPropagation();\r\n            onRemove(id);\r\n          }}>\r\n          &times;\r\n        </div>\r\n        <div style={{ color }} className={`todo-text ${checked && \"checked\"}`}>\r\n          <div>{text}</div>\r\n        </div>\r\n        {checked && <div className=\"check-mark\">✓</div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nclass TodoItemList extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.todos !== nextProps.todos;\r\n  }\r\n\r\n  render() {\r\n    const { todos, onToggle, onRemove } = this.props;\r\n\r\n    const todoList = todos.map(({ id, text, checked, color }) => (\r\n      <TodoItem\r\n        id={id}\r\n        text={text}\r\n        checked={checked}\r\n        onToggle={onToggle}\r\n        onRemove={onRemove}\r\n        key={id}\r\n        color={color}\r\n      />\r\n    ));\r\n\r\n    return <div>{todoList}</div>;\r\n  }\r\n}\r\n\r\nexport default TodoItemList;\r\n","import React from \"react\";\r\nimport \"./Palette.css\";\r\n\r\nconst Color = ({ color, active, onClick }) => {\r\n  return (\r\n    <div\r\n      className={`color ${active && \"active\"}`}\r\n      style={{ background: color }}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n};\r\n\r\nconst Palette = ({ colors, selected, onSelect }) => {\r\n  const colorList = colors.map(color => (\r\n    <Color\r\n      color={color}\r\n      active={selected === color}\r\n      onClick={() => onSelect(color)}\r\n      key={color}\r\n    />\r\n  ));\r\n  return <div className=\"palette\">{colorList}</div>;\r\n};\r\n\r\nexport default Palette;\r\n","import React, { Component } from \"react\";\nimport TodoListTemplate from \"./components/TodoListTemplate\";\nimport Form from \"./components/Form\";\nimport TodoItemList from \"./components/TodoItemList\";\nimport Palette from \"./components/Palette\";\n\nconst colors = [\"#343a40\", \"#f03e3e\", \"#12b886\", \"#228ae6\"];\n\nclass App extends Component {\n  id = 3; // 이미 0,1,2 가 존재하므로 3으로 설정\n\n  state = {\n    input: \"\",\n    todos: [\n      { id: 0, text: \" 리액트 소개\", checked: false },\n      { id: 1, text: \" 리액트 소개\", checked: true },\n      { id: 2, text: \" 리액트 소개\", checked: false }\n    ],\n    color: \"#343a40\"\n  };\n\n  handleChange = e => {\n    this.setState({\n      input: e.target.value // input 의 다음 바뀔 값\n    });\n  };\n\n  handleCreate = () => {\n    const { input, todos, color } = this.state;\n    this.setState({\n      input: \"\", // 인풋 비우고\n      // concat 을 사용하여 배열에 추가\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false,\n        color\n      })\n    });\n  };\n\n  handleKeyPress = e => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if (e.key === \"Enter\") {\n      this.handleCreate();\n    }\n  };\n\n  handleToggle = id => {\n    const { todos } = this.state;\n    const index = todos.findIndex(todo => todo.id === id);\n\n    const selected = todos[index];\n\n    this.setState({\n      todos: [\n        ...todos.slice(0, index),\n        {\n          ...selected,\n          checked: !selected.checked\n        },\n        ...todos.slice(index + 1, todos.length)\n      ]\n    });\n  };\n\n  handleRemove = id => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  };\n\n  handleSelectColor = color => {\n    this.setState({\n      color\n    });\n  };\n\n  render() {\n    const { input, todos, color } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove,\n      handleSelectColor\n    } = this;\n    return (\n      <TodoListTemplate\n        form={\n          <Form\n            value={input}\n            onKeyPress={handleKeyPress}\n            onChange={handleChange}\n            onCreate={handleCreate}\n            color={color}\n          />\n        }\n        palette={\n          <Palette\n            colors={colors}\n            selected={color}\n            onSelect={handleSelectColor}\n          />\n        }>\n        <TodoItemList\n          todos={todos}\n          onToggle={handleToggle}\n          onRemove={handleRemove}\n        />\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}